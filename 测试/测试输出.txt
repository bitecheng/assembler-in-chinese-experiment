 =====编译正确=======
addbyte.asm:2 add ax,5 --> [83, c0, 05]
addbyte.asm:3 add ax,strict byte 5 --> [83, c0, 05]
addbyte.asm:4 add ax,strict word 5 --> [05, 05, 00]
addbyte.asm:5 add ax,-128 --> [83, c0, 80]
addbyte.asm:6 add ax,strict byte -128 --> [83, c0, 80]
addbyte.asm:7 add ax,strict word -128 --> [05, 80, ff]
addbyte.asm:8 add ax,0x7f --> [83, c0, 7f]
addbyte.asm:9 add ax,strict byte 0x7f --> [83, c0, 7f]
addbyte.asm:10 add ax,strict word 0x7f --> [05, 7f, 00]
addbyte.asm:11 add ax,0x80 --> [05, 80, 00]
addbyte.asm:12 add ax,strict byte 0x80 --> [83, c0, 80]
addbyte.asm:13 add ax,strict word 0x80 --> [05, 80, 00]
addbyte.asm:14 add ax,0x100 --> [05, 00, 01]
addbyte.asm:15 add ax,strict byte 0x100 --> [83, c0, 00]
addbyte.asm:16 add ax,strict word 0x100 --> [05, 00, 01]
addbyte.asm:19 add bx,5 --> [83, c3, 05]
addbyte.asm:20 add bx,strict byte 5 --> [83, c3, 05]
addbyte.asm:21 add bx,strict word 5 --> [81, c3, 05, 00]
addbyte.asm:22 add bx,-128 --> [83, c3, 80]
addbyte.asm:23 add bx,strict byte -128 --> [83, c3, 80]
addbyte.asm:24 add bx,strict word -128 --> [81, c3, 80, ff]
addbyte.asm:25 add bx,0x7f --> [83, c3, 7f]
addbyte.asm:26 add bx,strict byte 0x7f --> [83, c3, 7f]
addbyte.asm:27 add bx,strict word 0x7f --> [81, c3, 7f, 00]
addbyte.asm:28 add bx,0x80 --> [81, c3, 80, 00]
addbyte.asm:29 add bx,strict byte 0x80 --> [83, c3, 80]
addbyte.asm:30 add bx,strict word 0x80 --> [81, c3, 80, 00]
addbyte.asm:31 add bx,0x100 --> [81, c3, 00, 01]
addbyte.asm:32 add bx,strict byte 0x100 --> [83, c3, 00]
addbyte.asm:33 add bx,strict word 0x100 --> [81, c3, 00, 01]
arithsmall.asm:2 and eax, 3584 --> [25, 00, 0e, 00, 00]
arithsmall.asm:3 and eax, 35 --> [83, e0, 23]
arithsmall.asm:4 and eax, strict dword 3584 --> [25, 00, 0e, 00, 00]
arithsmall.asm:5 and eax, strict dword 35 --> [25, 23, 00, 00, 00]
arithsmall.asm:6 and eax, strict byte 3584 --> [83, e0, 00]
arithsmall.asm:7 and eax, strict byte 35 --> [83, e0, 23]
arithsmall.asm:8 and ebx, 3584 --> [81, e3, 00, 0e, 00, 00]
arithsmall.asm:9 and ebx, 35 --> [83, e3, 23]
arithsmall.asm:10 and ebx, strict dword 3584 --> [81, e3, 00, 0e, 00, 00]
arithsmall.asm:11 and ebx, strict dword 35 --> [81, e3, 23, 00, 00, 00]
arithsmall.asm:12 and ebx, strict byte 3584 --> [83, e3, 00]
arithsmall.asm:13 and ebx, strict byte 35 --> [83, e3, 23]
genopcode.asm:2 mov al, 0 --> [b0, 00]
genopcode.asm:3 mov byte al, 0 --> [b0, 00]
genopcode.asm:4 mov al, byte 0 --> [b0, 00]
genopcode.asm:5 mov byte al, byte 0 --> [b0, 00]
genopcode.asm:7 mov byte [0], 0 --> [c6, 06, 00, 00, 00]
genopcode.asm:8 mov [0], word 0 --> [c7, 06, 00, 00, 00, 00]
genopcode.asm:9 mov dword [0], dword 0 --> [66, c7, 06, 00, 00, 00, 00, 00, 00]
genopcode.asm:11 mov eax, 0 --> [66, b8, 00, 00, 00, 00]
genopcode.asm:12 mov dword eax, 0 --> [66, b8, 00, 00, 00, 00]
genopcode.asm:13 mov eax, dword 0 --> [66, b8, 00, 00, 00, 00]
genopcode.asm:15 mov dword eax, dword 0 --> [66, b8, 00, 00, 00, 00]
genopcode.asm:16 mov bx, 1h --> [bb, 01, 00]
imm64.asm:7 mov rax, 0x1000              ; 32-bit imm --> [48, c7, c0, 00, 10, 00, 00]
imm64.asm:8 mov rax, 0x1122334455667788  ; 64-bit imm (larger than signed 32-bit) --> [48, b8, 88, 77, 66, 55, 44, 33, 22, 11]
mem64.asm:2 mov ax, [0]			; 66 8B 04 25 00 00 00 00 --> [66, 8b]
mixcase.asm:2 MOV AX,5 --> [b8, 05, 00]
riprel2.asm:5 	mov rax,[foo] --> [48, 8b]
ripseg.asm:5 mov rbx, [foo] --> [48, 8b]
shift.asm:3 shl al, 1 --> [d0, e0]
shift64.asm:2 shl rax, 5 --> [48, c1, e0, 05]
shift64.asm:3 shl rax, 32 --> [48, c1, e0, 20]
shift64.asm:4 shr rax, 5 --> [48, c1, e8, 05]
shift64.asm:5 shr rax, 32 --> [48, c1, e8, 20]
strict.asm:17 add eax, 4 --> [83, c0, 04]
xchg64.asm:2 xchg ax, ax --> [66, 90]


 =====编译错误=======
bittest.asm:1 btr eax, 4 --> [66, ba, f0, 04]
cpubasic-err.asm:4 shl ax, 2 --> [c1, e0, 02]
larlsl.asm:2 lar ax, bx --> [02]
mem64-err.asm:4 mov ax, [ax] --> [66, 8b]
mem64hi32.asm:2 adc byte [eax], 12h --> [80, 06, 00, 12]
mem64rip.asm:2 mov eax, [rip] --> [66, 8b]
nomem64.asm:3 mov ax, 5 --> [66, b8, 05, 00]
opersize.asm:4 mov ax, bx --> [66, 89, c0]
opsize-err.asm:1 mov ax,1 --> [b8, 01, 00]
overflow.asm:3 mov ax, 0x1ffff --> [66, b8, ff, ff]
riprel1.asm:6 mov rax, dword val		; 32-bit imm --> [48, b8]
segoff.asm:5 mov ax,[foo] --> [8b]
strict-err.asm:2 add [rax], dword 4		; illegal; must use dword [eax], 4 --> [66, 81, 06, 00, 04, 00]
xchg64.asm:3 xchg ax, bx --> [66, 87]
编译正确代码行数: 67 已识别代码行数: 415